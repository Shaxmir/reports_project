# bot.py
import os
import django
import asyncio
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "sales_reports.settings")
django.setup()

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from sales_reports.settings import BOT_TOKEN
from aiogram import F

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–∑ –ø–∞–∫–µ—Ç–∞ handlers
from reports.handlers import sale_handlers, expense_handlers, cash_handlers, report_handlers, expenses_edit_handlers, sale_edit_handlers, reports_monthly_handlers, search_handler, search_sale_handlers
from reports.handlers.expenses_edit_handlers import EditExpenseState
from reports.handlers.search_handler import SearchStates
from reports.filters.role_filters import IsAdmin, IsCreator
from reports.buttons.menu_buttons import keyboard

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
dp.message.register(sale_handlers.start_sale, Command("sale"), IsAdmin())
dp.message.register(sale_handlers.start_sale, F.text.casefold() == "‚ûï –ø—Ä–æ–¥–∞–∂–∞", IsAdmin())
dp.message.register(sale_handlers.process_name, sale_handlers.SaleState.name)
dp.message.register(sale_handlers.process_quantity, sale_handlers.SaleState.quantity)
dp.message.register(sale_handlers.process_price, sale_handlers.SaleState.price)
dp.message.register(sale_handlers.process_payment, sale_handlers.SaleState.payment_method)
dp.message.register(sale_handlers.process_sale_date, sale_handlers.SaleState.sale_date)
dp.message.register(sale_handlers.process_shipment_date, sale_handlers.SaleState.shipment_date)
dp.message.register(sale_handlers.process_comment, sale_handlers.SaleState.comment)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤
dp.message.register(sale_edit_handlers.get_all_sales, Command("sales"), IsAdmin())
dp.message.register(sale_edit_handlers.get_all_sales, F.text.casefold() == "‚úèÔ∏è —Ä–µ–¥. –ø—Ä–æ–¥–∞–∂—É", IsAdmin())
dp.callback_query.register(sale_edit_handlers.show_sale_info, lambda c: c.data.startswith("sale_"), IsAdmin())
dp.callback_query.register(sale_edit_handlers.delete_sale, lambda c: c.data.startswith("delete_sale_"), IsAdmin())
dp.callback_query.register(sale_edit_handlers.start_edit_sale, lambda c: c.data.startswith("edit_sale_"), IsAdmin())

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏
dp.message.register(sale_edit_handlers.process_edit_name, sale_edit_handlers.EditSaleState.name)
dp.message.register(sale_edit_handlers.process_edit_quantity, sale_edit_handlers.EditSaleState.quantity)
dp.message.register(sale_edit_handlers.process_edit_price, sale_edit_handlers.EditSaleState.price)
dp.message.register(sale_edit_handlers.process_edit_payment, sale_edit_handlers.EditSaleState.payment_method)
dp.message.register(sale_edit_handlers.process_edit_comment, sale_edit_handlers.EditSaleState.comment)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
dp.message.register(expense_handlers.start_expense, Command("expense"), IsAdmin())
dp.message.register(expense_handlers.start_expense, F.text.casefold() == "‚ûï —Ä–∞—Å—Ö–æ–¥", IsAdmin())
dp.message.register(expense_handlers.process_reason, expense_handlers.ExpenseState.reason)
dp.message.register(expense_handlers.process_amount, expense_handlers.ExpenseState.amount)
dp.message.register(expense_handlers.process_expense_comment, expense_handlers.ExpenseState.comment)

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤
dp.message.register(expenses_edit_handlers.get_expenses, Command("expenses"), IsAdmin())  # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
dp.message.register(expenses_edit_handlers.get_expenses, F.text.casefold() == "‚úèÔ∏è —Ä–µ–¥. —Ä–∞—Å—Ö–æ–¥", IsAdmin())  # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
dp.callback_query.register(expenses_edit_handlers.delete_expense_callback, lambda c: c.data.startswith("delete_expense_"), IsAdmin())  # –£–¥–∞–ª–µ–Ω–∏–µ
dp.callback_query.register(expenses_edit_handlers.edit_expense_callback, lambda c: c.data.startswith("edit_expense_"), IsAdmin())  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ
dp.message.register(expenses_edit_handlers.edit_expense_amount, EditExpenseState.amount)  # –í–≤–æ–¥ —Å—É–º–º—ã
dp.message.register(expenses_edit_handlers.edit_expense_comment, EditExpenseState.comment)  # –í–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
dp.message.register(expenses_edit_handlers.edit_expense_reason, EditExpenseState.reason)  # –í–≤–æ–¥ –ø—Ä–∏—á–∏–Ω—ã

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Å—Å–æ–π
dp.message.register(cash_handlers.start_cash, Command("cash"), IsAdmin())
dp.message.register(cash_handlers.start_cash, F.text.casefold() == "‚ûï –≤ –∫–∞—Å—Å—É", IsAdmin())
dp.message.register(cash_handlers.process_cash, cash_handlers.CashState.amount)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
dp.message.register(report_handlers.send_report_text, Command("report"))
dp.message.register(report_handlers.send_report_text, F.text.casefold() == "üìä –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
dp.message.register(report_handlers.send_report_pdf, Command("report_pdf"))
dp.message.register(report_handlers.send_report_pdf, F.text.casefold() == "üìÑ –æ—Ç—á–µ—Ç –≤ PDF")
dp.message.register(sale_handlers.get_all_sales, Command("all_sales"))
dp.message.register(sale_handlers.get_all_sales, F.text.casefold() == "üí∞ –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")

# –û—Ç—á–µ—Ç—ã —Å—Ç–∞—Ä—ã–µ
dp.message.register(report_handlers.handle_report_by_date, Command("report_by_date"))
dp.message.register(report_handlers.handle_report_by_date, F.text.casefold() == "üìÖ —Å—Ç–∞—Ä—ã–µ –æ—Ç—á–µ—Ç—ã")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º callback-—Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
dp.callback_query.register(report_handlers.handle_report_date_selection, F.data.startswith("report_date:"))
dp.callback_query.register(report_handlers.handle_report_pagination, F.data.startswith("report_page:"))

# –û—Ç—á–µ—Ç—ã –∑–∞ –º–µ—Å—è—Ü
dp.message.register(reports_monthly_handlers.monthly_report_start, Command("monthly_report"))
dp.message.register(reports_monthly_handlers.monthly_report_start, F.text.casefold() == "üìÜ –û—Ç—á–µ—Ç—ã –∑–∞ –º–µ—Å—è—Ü")
dp.callback_query.register(reports_monthly_handlers.handle_year_selection, F.data.startswith("year_"))
dp.callback_query.register(reports_monthly_handlers.handle_month_selection, F.data.startswith("month_"))


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
dp.message.register(search_handler.search_prompt, Command("search"))
dp.message.register(search_handler.search_prompt, F.text.casefold() == "üîé –ü–æ–∏—Å–∫")
dp.message.register(search_handler.process_search_query, search_handler.SearchStates.waiting_for_date)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
dp.message.register(search_sale_handlers.search_sale_start, Command("search_sale"))
dp.message.register(search_sale_handlers.search_sale_start, F.text.casefold() == "üîé –ø–æ–∏—Å–∫ –ø–æ–¥—Ä–æ–±–Ω—ã–π")
dp.message.register(search_sale_handlers.process_search_query, search_sale_handlers.SearchSale.waiting_for_query)
dp.message.register(search_sale_handlers.process_period_input, search_sale_handlers.SearchSale.waiting_for_period)
dp.message.register(search_sale_handlers.process_query_with_period, search_sale_handlers.SearchSale.waiting_for_query_with_period)
dp.callback_query.register(search_sale_handlers.handle_period_choice, F.data.in_(["all_time", "specific_period"]))

# –ü—Ä–æ—Å—Ç–æ–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
@dp.message(Command("start"))
async def start_cmd(message: Message):
    user_id = message.from_user.id
    print(f"User ID: {user_id}")
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç—á–µ—Ç—ã. –ü–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ —Å –º–µ–Ω—é –ø–∞–Ω–µ–ª–∏", reply_markup=keyboard)

@dp.message(Command("myid"))
async def start_cmd(message: Message):
    user_id = message.from_user.id
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç! –¢–≤–æ–π ID {user_id}.\n–û—Ç–ø—Ä–∞–≤—å –µ–≥–æ @shaxsodo –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
