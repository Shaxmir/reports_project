from aiogram import Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime
from reports.models import Sale, Expense
from aiogram.fsm.state import StatesGroup, State
from asgiref.sync import sync_to_async

class SearchStates(StatesGroup):
    waiting_for_date = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞—Ç—ã –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Django ORM —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º sync_to_async
@sync_to_async
def get_sales_by_date_range(start_date, end_date):
    sales = Sale.objects.filter(sale_date__gte=start_date, sale_date__lte=end_date)
    return [{"date": sale.sale_date, "amount": sale.total_price, "item": sale.name} for sale in sales]

@sync_to_async
def get_expenses_by_date_range(start_date, end_date):
    expenses = Expense.objects.filter(date__gte=start_date, date__lte=end_date)
    return [{"date": expense.date, "amount": expense.amount, "category": expense.reason} for expense in expenses]

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /search
async def search_prompt(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                         "`YYYY-MM-DD` –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è\n"
                         "`YYYY-MM-DD - YYYY-MM-DD` –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞", parse_mode="Markdown")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã
    await state.set_state(SearchStates.waiting_for_date)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –¥–∞—Ç
async def process_search_query(message: Message, state: FSMContext):
    query = message.text.strip()

    try:
        # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
        if " - " in query:
            start_date, end_date = query.split(" - ")
            start_date = datetime.strptime(start_date.strip(), "%Y-%m-%d").date()
            end_date = datetime.strptime(end_date.strip(), "%Y-%m-%d").date()
        else:
            start_date = end_date = datetime.strptime(query, "%Y-%m-%d").date()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∏ —Ä–∞—Å—Ö–æ–¥–∞–º
        sales = await get_sales_by_date_range(start_date, end_date)
        expenses = await get_expenses_by_date_range(start_date, end_date)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if not sales and not expenses:
            await message.answer("–ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç.")
            return

        response = f"üìÖ –û—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}\n\n"

        if sales:
            response += "üí∞ *–ü—Ä–æ–¥–∞–∂–∏:*\n"
            for sale in sales:
                response += f"- {sale['date']} | {sale['amount']} —Ä—É–±. | {sale['item']}\n"

        if expenses:
            response += "\nüí∏ *–†–∞—Å—Ö–æ–¥—ã:*\n"
            for expense in expenses:
                response += f"- {expense['date']} | {expense['amount']} —Ä—É–±. | {expense['category']}\n"

        await message.answer(response, parse_mode="Markdown")

    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `YYYY-MM-DD` –∏–ª–∏ `YYYY-MM-DD - YYYY-MM-DD`.")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ç.–∫. –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    await state.clear()
