from aiogram import F, types
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from datetime import datetime
from reportlab.lib.pagesizes import letter
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet
import re
import os
from asgiref.sync import sync_to_async

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
pdfmetrics.registerFont(TTFont('DejaVuSans', 'DejaVuSans.ttf'))
pdfmetrics.registerFont(TTFont('DejaVuSans-Bold', 'DejaVuSans-Bold.ttf'))

class SearchSale(StatesGroup):
    waiting_for_query = State()
    waiting_for_period = State()
    waiting_for_query_with_period = State()

async def search_sale_start(message: Message, state: FSMContext):
    help_text = (
        "üîç –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–Ω–µ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: '12–º–º F/W')\n\n"
        "–ü–æ–∏—Å–∫ —É—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞, –Ω–æ –Ω–µ –∏—Ö –ø–æ—Ä—è–¥–æ–∫. "
        "–†–µ–≥–∏—Å—Ç—Ä –±—É–∫–≤ –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è."
    )
    await message.answer(help_text)
    await state.set_state(SearchSale.waiting_for_query)

async def process_search_query(message: Message, state: FSMContext):
    search_query = message.text.lower()
    await state.update_data(search_query=search_query)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è", callback_data="all_time")],
        [InlineKeyboardButton(text="–ó–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="specific_period")]
    ])

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=keyboard
    )

async def handle_period_choice(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "specific_period":
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "YYYY-MM-DD - YYYY-MM-DD\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 2025-03-01 - 2025-03-31"
        )
        await state.set_state(SearchSale.waiting_for_period)
    else:
        data = await state.get_data()
        search_query = data['search_query']
        await generate_and_send_report(callback.message, search_query)
        await state.clear()

    await callback.answer()

async def process_period_input(message: Message, state: FSMContext):
    try:
        date_from, date_to = map(str.strip, message.text.split('-'))
        date_from = datetime.strptime(date_from.strip(), "%Y-%m-%d").date()
        date_to = datetime.strptime(date_to.strip(), "%Y-%m-%d").date()

        await state.update_data(date_from=date_from, date_to=date_to)
        await message.answer(
            "–¢–µ–ø–µ—Ä—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ"
        )
        await state.set_state(SearchSale.waiting_for_query_with_period)
    except Exception as e:
        await message.answer(
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "YYYY-MM-DD - YYYY-MM-DD\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 2025-03-01 - 2025-03-31"
        )

async def process_query_with_period(message: Message, state: FSMContext):
    search_query = message.text.lower()
    data = await state.get_data()
    date_from = data['date_from']
    date_to = data['date_to']

    await generate_and_send_report(
        message,
        search_query,
        date_from=date_from,
        date_to=date_to
    )
    await state.clear()

@sync_to_async
def search_sales_in_db(search_query, date_from=None, date_to=None):
    from reports.models import Sale
    from django.db.models import Q, Sum

    # –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
    search_words = re.findall(r'\w+', search_query)

    # –°–æ–∑–¥–∞–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–ª–æ–≤—É
    q_objects = Q()
    for word in search_words:
        q_objects &= Q(name__icontains=word)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if date_from and date_to:
        q_objects &= Q(sale_date__gte=date_from, sale_date__lte=date_to)

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –º–µ—Å—è—Ü—É –∏ –≥–æ–¥—É
    sales = Sale.objects.filter(q_objects).order_by('sale_date')

    if not sales.exists():
        return None

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
    grouped_sales = {}
    for sale in sales:
        month_year = sale.sale_date.strftime("%B %Y")
        if month_year not in grouped_sales:
            grouped_sales[month_year] = []
        grouped_sales[month_year].append(sale)

    return grouped_sales

async def generate_and_send_report(message, search_query, date_from=None, date_to=None):
    grouped_sales = await search_sales_in_db(search_query, date_from, date_to)

    if not grouped_sales:
        await message.answer(
            f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥–∞–∂" +
            (f" –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {date_from} –ø–æ {date_to}" if date_from else "")
        )
        return

    # –°–æ–∑–¥–∞–µ–º PDF –æ—Ç—á–µ—Ç
    filename = f"sales_report_{datetime.now().timestamp()}.pdf"
    doc = SimpleDocTemplate(filename, pagesize=letter)
    styles = getSampleStyleSheet()
    styles['Title'].fontName = 'DejaVuSans-Bold'
    styles['Normal'].fontName = 'DejaVuSans'

    elements = []

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    if date_from:
        title = f"–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º '{search_query}'\n—Å {date_from} –ø–æ {date_to}"
    else:
        title = f"–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º '{search_query}' –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è"

    elements.append(Paragraph(title, styles['Title']))
    elements.append(Spacer(1, 12))

    # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–∏—Ö —Å—É–º–º
    total_quantity = 0
    total_amount = 0
    payment_totals = {'cash': 0, 'card': 0, 'invoice': 0}

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü–∞–º
    for month_year, sales in grouped_sales.items():
        elements.append(Paragraph(month_year, styles['Heading2']))

        for sale in sales:
            elements.append(Paragraph(
                f"{sale.name} - {sale.quantity} —à—Ç - {sale.total_price} —Ä—É–± - "
                f"{get_payment_method(sale.payment_method)} - {sale.sale_date.strftime('%d.%m.%Y')}",
                styles['Normal']
            ))

            # –°—á–∏—Ç–∞–µ–º –æ–±—â–∏–µ —Å—É–º–º—ã
            total_quantity += sale.quantity
            total_amount += sale.total_price
            payment_totals[sale.payment_method] += sale.total_price

        elements.append(Spacer(1, 12))

    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    elements.append(Paragraph("–ò—Ç–æ–≥–æ:", styles['Heading2']))
    elements.append(Paragraph(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total_quantity} —à—Ç", styles['Normal']))
    elements.append(Paragraph(f"–û–±—â–∞—è —Å—É–º–º–∞: {total_amount} —Ä—É–±", styles['Normal']))
    elements.append(Paragraph(
        f"–ù–∞–ª–∏—á–Ω—ã–º–∏: {payment_totals['cash']} —Ä—É–± | "
        f"–ö–∞—Ä—Ç–æ–π: {payment_totals['card']} —Ä—É–± | "
        f"–ü–æ —Å—á–µ—Ç—É: {payment_totals['invoice']} —Ä—É–±",
        styles['Normal']
    ))

    doc.build(elements)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    file = FSInputFile(filename)
    await message.answer_document(
        file,
        caption=title
    )
    os.remove(filename)

def get_payment_method(method):
    methods = {
        'cash': '–ù–∞–ª–∏—á–Ω—ã–º–∏',
        'card': '–ö–∞—Ä—Ç–æ–π',
        'invoice': '–ü–æ —Å—á–µ—Ç—É'
    }
    return methods.get(method, method)
