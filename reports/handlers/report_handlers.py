# handlers/report_handlers.py
import os
import aiohttp
from datetime import date, datetime
from io import BytesIO
from aiogram import types
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile
from asgiref.sync import sync_to_async
from openpyxl import Workbook
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reports.models import Sale, Expense, CashRegister
from reportlab.lib.utils import simpleSplit
from django.utils.timezone import now

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
pdfmetrics.registerFont(TTFont('DejaVuSans', 'DejaVuSans.ttf'))
pdfmetrics.registerFont(TTFont('DejaVuSans-Bold', 'DejaVuSans-Bold.ttf'))
@sync_to_async
def get_sales_by_date(date):
    return list(Sale.objects.filter(sale_date=date))

@sync_to_async
def get_expenses_by_date(date):
    return list(Expense.objects.filter(date=date))

@sync_to_async
def get_cash_balance_by_date(date):
    return CashRegister.objects.filter(date=date).latest('date').cash_total

def generate_pdf(sales, expenses, cash_balance, report_date):
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=letter)
    c.setFont("DejaVuSans", 16)
    c.drawString(100, 750, f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ {report_date}")
    c.setFont("DejaVuSans", 12)
    c.drawString(100, 730, "–ü—Ä–æ–¥–∞–∂–∏:")
    y_position = 710
    c.setFont("DejaVuSans", 10)
    payment_method = {'invoice': '–ü–æ —Å—á–µ—Ç—É', 'card': '–ü–æ –∫–∞—Ä—Ç–µ', 'cash': '–ù–∞–ª–∏—á–Ω—ã–º–∏'}
    for sale in sales:
        sale_text = f"{sale.name} - {sale.quantity} —à—Ç - {sale.total_price} —Ä—É–±. - {payment_method[sale.payment_method]} - {sale.sale_date}"
        c.drawString(100, y_position, sale_text)
        y_position -= 15  # –û—Ç—Å—Ç—É–ø –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏

        if sale.comment:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∂–∏—Ä–Ω—ã–º
            c.setFont("DejaVuSans-Bold", 10)  # –î–µ–ª–∞–µ–º –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç
            comment_lines = simpleSplit(f"- {sale.comment}", "DejaVuSans-Bold", 10, 400)  # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –¥–ª–∏–Ω–Ω—ã–π
            for line in comment_lines:
                c.drawString(120, y_position, line)  # –ß—É—Ç—å –ø—Ä–∞–≤–µ–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                y_position -= 15  # –û—Ç—Å—Ç—É–ø –≤–Ω–∏–∑
            c.setFont("DejaVuSans", 10)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —à—Ä–∏—Ñ—Ç

        y_position -= 10  # –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –ø—Ä–æ–¥–∞–∂–∞–º–∏
    c.setFont("DejaVuSans", 12)
    c.drawString(100, y_position - 20, "–†–∞—Å—Ö–æ–¥—ã:")
    y_position -= 40
    c.setFont("DejaVuSans", 10)
    for expense in expenses:
        c.drawString(100, y_position, f"{expense.reason} - {expense.amount} —Ä—É–±.")
        y_position -= 15
        if expense.comment:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∂–∏—Ä–Ω—ã–º
            c.setFont("DejaVuSans-Bold", 10)  # –î–µ–ª–∞–µ–º –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç
            comment_lines = simpleSplit(f"- {expense.comment}", "DejaVuSans-Bold", 10, 400)  # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –¥–ª–∏–Ω–Ω—ã–π
            for line in comment_lines:
                c.drawString(120, y_position, line)  # –ß—É—Ç—å –ø—Ä–∞–≤–µ–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                y_position -= 15  # –û—Ç—Å—Ç—É–ø –≤–Ω–∏–∑
            c.setFont("DejaVuSans", 10)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —à—Ä–∏—Ñ—Ç
    c.setFont("DejaVuSans", 12)
    c.drawString(100, y_position - 20, f"–û—Å—Ç–∞—Ç–æ–∫ –≤ –∫–∞—Å—Å–µ: {cash_balance} —Ä—É–±.")
    c.showPage()
    c.save()
    buffer.seek(0)
    return buffer.getvalue()

async def send_report_text(message: Message):
    async with aiohttp.ClientSession() as session:
        async with session.get("http://127.0.0.1:8000/api/report/") as resp:
            data = await resp.json()
            text = f"üìä *–û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è:*\n"
            text += f"üí∞ –ü—Ä–æ–¥–∞–Ω–æ –Ω–∞ {data['total_sales']} —Ä—É–±.\n"
            text += f"   - üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏: {data.get('sales_cash', 0)} —Ä—É–±.\n"
            text += f"   - üí≥ –ü–æ –∫–∞—Ä—Ç–µ: {data.get('sales_card', 0)} —Ä—É–±.\n"
            text += f"   - üè¶ –ü–æ —Å—á–µ—Ç—É: {data.get('sales_invoice', 0)} —Ä—É–±.\n\n"
            text += f"üí∏ *–†–∞—Å—Ö–æ–¥—ã: {data['total_expenses']} —Ä—É–±.*\n"
            if data.get("expenses", []):
                for expense in data["expenses"]:
                    text += f"   - {expense['reason']}: {expense['amount']} —Ä—É–±.\n\n"
            else:
                text += "   - ‚ùå –ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤.\n\n"
            text += f"üõ† –û—Å—Ç–∞—Ç–æ–∫ –≤ –∫–∞—Å—Å–µ: {data['cash_total']} —Ä—É–±."
            await message.answer(text, parse_mode="Markdown")

async def send_report_pdf(message: Message):
    today = now().date()
    sales = await get_today_sales()
    expenses = await get_today_expenses()
    if not sales and not expenses:
        await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∏ —Ä–∞—Å—Ö–æ–¥–∞—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è.")
        return
    cash_balance = await get_cash_balance()
    pdf_data = generate_pdf(sales, expenses, cash_balance)
    pdf_filename = "report.pdf"
    with open(pdf_filename, "wb") as f:
        f.write(pdf_data)
    pdf_file = FSInputFile(pdf_filename, filename=f"–û—Ç—á–µ—Ç_–Ω–∞_{today}.pdf")
    await message.answer_document(pdf_file, caption="–û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å")
    os.remove(pdf_filename)



###################


@sync_to_async
def get_unique_dates():
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Sale
    sales_dates = Sale.objects.dates('sale_date', 'day').distinct()
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Expense
    expenses_dates = Expense.objects.dates('date', 'day').distinct()
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
    all_dates = sorted(set(sales_dates) | set(expenses_dates), reverse=True)
    return all_dates


# –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

async def create_dates_keyboard(page: int = 0, items_per_page: int = 5):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    """
    dates = await get_unique_dates()
    total_dates = len(dates)
    total_pages = (total_dates + items_per_page - 1) // items_per_page

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page < 0:
        page = 0
    elif page >= total_pages:
        page = total_pages - 1

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start = page * items_per_page
    end = start + items_per_page
    current_dates = dates[start:end]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    for date in current_dates:
        builder.button(text=date.strftime("%Y-%m-%d"), callback_data=f"report_date:{date}")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if page > 0:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"report_page:{page - 1}")
    if page < total_pages - 1:
        builder.button(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"report_page:{page + 1}")

    builder.adjust(1)  # –û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫—É
    return builder.as_markup()


async def handle_report_by_date(message: Message):
    keyboard = await create_dates_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –æ—Ç—á–µ—Ç–∞:", reply_markup=keyboard)



from aiogram import F

async def handle_report_date_selection(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞.
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ callback_data
    date_str = callback.data.split(":")[1]
    report_date = datetime.strptime(date_str, "%Y-%m-%d").date()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    sales = await get_sales_by_date(report_date)
    expenses = await get_expenses_by_date(report_date)
    if not sales and not expenses:
        await callback.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É.", show_alert=True)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º PDF-–æ—Ç—á–µ—Ç
    cash_balance = await get_cash_balance_by_date(report_date)
    pdf_data = generate_pdf(sales, expenses, cash_balance, report_date)
    pdf_filename = f"report_{report_date}.pdf"
    with open(pdf_filename, "wb") as f:
        f.write(pdf_data)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF-—Ñ–∞–π–ª
    pdf_file = FSInputFile(pdf_filename, filename=f"–û—Ç—á–µ—Ç_–Ω–∞_{report_date}.pdf")
    await callback.message.answer_document(pdf_file, caption=f"–û—Ç—á–µ—Ç –∑–∞ {report_date}")
    os.remove(pdf_filename)

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
    await callback.answer()


async def handle_report_pagination(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–∞—Ç–∞–º–∏.
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    page = int(callback.data.split(":")[1])

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
    keyboard = await create_dates_keyboard(page)
    await callback.message.edit_reply_markup(reply_markup=keyboard)

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
    await callback.answer()