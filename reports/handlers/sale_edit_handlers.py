from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import aiohttp
import aiogram
from datetime import date
from aiogram import types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from asgiref.sync import sync_to_async
from reports.models import Sale, CashRegister
from decimal import Decimal

@sync_to_async
def get_today_sales():
    return list(Sale.objects.filter(sale_date=date.today()))

async def get_all_sales(message: types.Message):
    sales = await get_today_sales()  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏

    if not sales:
        await message.answer("‚ùå –ü—Ä–æ–¥–∞–∂ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –±—ã–ª–æ.")
        return

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
    buttons = []
    for sale in sales:
        button = InlineKeyboardButton(text=sale.name, callback_data=f"sale_{sale.id}")
        buttons.append([button])  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons, row_width=1)

    await message.answer("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–¥–∞–∂ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:", reply_markup=keyboard)




async def show_sale_info(callback_query: types.CallbackQuery):
    sale_id = int(callback_query.data.split("_")[1])
    sale = await sync_to_async(Sale.objects.get)(id=sale_id)

    payment_method = {
        'invoice': '–ü–æ —Å—á–µ—Ç—É',
        'card': '–ö–∞—Ä—Ç–æ–π',
        'cash': '–ù–∞–ª–∏—á–Ω—ã–º–∏'
    }.get(sale.payment_method, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

    sale_info = (
        f"ü™ö *{sale.name}*\n"
        f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {sale.quantity} —à—Ç.\n"
        f"   - –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {sale.price_per_unit} —Ä—É–±.\n"
        f"   - –û–±—â–∞—è —Å—É–º–º–∞: {sale.total_price} —Ä—É–±.\n"
        f"   - –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method}\n"
        f"   - –î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏: {sale.sale_date}\n"
        f"   - –î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏: {sale.shipment_date}\n"
        f"   - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {sale.comment if sale.comment else '–ù–µ—Ç'}\n"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = [
        InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_sale_{sale.id}"),
        InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_sale_{sale.id}")
    ]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons], row_width=2)

    await callback_query.message.answer(sale_info, reply_markup=keyboard)

async def delete_sale(callback_query: CallbackQuery):
    sale_id = int(callback_query.data.split("_")[2])
    sale = await sync_to_async(Sale.objects.get)(id=sale_id)

    if sale.payment_method == "cash":
        # –ò—â–µ–º –∑–∞–ø–∏—Å—å –≤ –∫–∞—Å—Å–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        cash_register, created = await sync_to_async(CashRegister.objects.get_or_create)(
            date=date.today(),
            defaults={"cash_total": Decimal('0.00')}  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        )
        # –í—ã—á–∏—Ç–∞–µ–º —Å—É–º–º—É –∏–∑ –∫–∞—Å—Å—ã
        cash_register.cash_total -= sale.total_price
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        cash_register.cash_total = max(Decimal('0.00'), cash_register.cash_total)
        await sync_to_async(cash_register.save)()

    await sync_to_async(sale.delete)()
    await callback_query.message.answer("‚úÖ –ü—Ä–æ–¥–∞–∂–∞ —É–¥–∞–ª–µ–Ω–∞!")


class EditSaleState(StatesGroup):
    name = State()
    quantity = State()
    price = State()
    payment_method = State()
    comment = State()

async def start_edit_sale(callback_query: CallbackQuery, state: FSMContext):
    sale_id = int(callback_query.data.split("_")[2])
    await state.update_data(sale_id=sale_id)
    await state.set_state(EditSaleState.name)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–Ω–µ—Ä—ã:")

async def process_edit_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(EditSaleState.quantity)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü:")

async def process_edit_quantity(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    await state.update_data(quantity=int(message.text))
    await state.set_state(EditSaleState.price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É:")

async def process_edit_price(message: Message, state: FSMContext):
    try:
        price = float(message.text)
        await state.update_data(price_per_unit=price)
        await state.set_state(EditSaleState.payment_method)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: invoice, card, cash")
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

async def process_edit_payment(message: Message, state: FSMContext):
    if message.text not in ["invoice", "card", "cash"]:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ: invoice, card –∏–ª–∏ cash")
        return
    await state.update_data(payment_method=message.text)
    await state.set_state(EditSaleState.comment)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")

async def process_edit_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    data["comment"] = message.text if message.text else ""
    sale_id = data.pop("sale_id")
    sale = await sync_to_async(Sale.objects.get)(id=sale_id)

    # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫ —Ç–∏–ø—É Decimal
    old_total_price = Decimal(str(sale.total_price))  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ Decimal
    sale.total_price = Decimal(str(sale.quantity * sale.price_per_unit))  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ Decimal

    old_payment_method = sale.payment_method

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –ø—Ä–æ–¥–∞–∂–∏
    for key, value in data.items():
        setattr(sale, key, value)
    await sync_to_async(sale.save)()

   # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Å—Å—É, –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏
    if old_payment_method == "cash" and sale.payment_method == "cash":
        # –ò—â–µ–º –∑–∞–ø–∏—Å—å –≤ –∫–∞—Å—Å–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        cash_register, created = await sync_to_async(CashRegister.objects.get_or_create)(
            date=date.today(),
            defaults={"cash_total": Decimal('0.00')}  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        )
        if sale.total_price > old_total_price:
            cash_register.cash_total += Decimal(str(sale.total_price)) - old_total_price
        else:
            cash_register.cash_total -= old_total_price - Decimal(str(sale.total_price))
        await sync_to_async(cash_register.save)()

    elif old_payment_method == "cash" and sale.payment_method != "cash":
        # –ò—â–µ–º –∑–∞–ø–∏—Å—å –≤ –∫–∞—Å—Å–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        cash_register, created = await sync_to_async(CashRegister.objects.get_or_create)(
            date=date.today(),
            defaults={"cash_total": Decimal('0.00')}
        )
        cash_register.cash_total -= old_total_price
        await sync_to_async(cash_register.save)()

    elif old_payment_method != "cash" and sale.payment_method == "cash":
        # –ò—â–µ–º –∑–∞–ø–∏—Å—å –≤ –∫–∞—Å—Å–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        cash_register, created = await sync_to_async(CashRegister.objects.get_or_create)(
            date=date.today(),
            defaults={"cash_total": Decimal('0.00')}
        )
        cash_register.cash_total += Decimal(str(sale.total_price))
        await sync_to_async(cash_register.save)()

    await message.answer("‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!")
    await state.clear()
