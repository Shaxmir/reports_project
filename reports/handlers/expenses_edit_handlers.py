from aiogram import types
from aiogram.filters import Command
import aiohttp
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery
from asgiref.sync import sync_to_async
from datetime import date
from reports.models import Expense

API_URL = "http://127.0.0.1:8000/api/expenses/"

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class EditExpenseState(StatesGroup):
    amount = State()
    comment = State()

@sync_to_async
def get_today_expenses():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    return list(Expense.objects.filter(date=date.today()))

async def get_expenses(message: types.Message):
    """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    expenses = await get_today_expenses()

    if not expenses:
        await message.answer("‚ùå –†–∞—Å—Ö–æ–¥–æ–≤ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –±—ã–ª–æ.")
        return

    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    for expense in expenses:
        expense_text = (
            f"üìå *{expense.reason}*\n"
            f"   - –°—É–º–º–∞: {expense.amount} —Ä—É–±.\n"
            f"   - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {expense.comment if expense.comment else '–ù–µ—Ç'}\n"
            f"-"
        )

        keyboard = InlineKeyboardBuilder()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å" –∏ "–ò–∑–º–µ–Ω–∏—Ç—å" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞
        keyboard.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_expense_{expense.id}")
        keyboard.button(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_expense_{expense.id}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å—Ö–æ–¥–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        await message.answer(expense_text, reply_markup=keyboard.as_markup())


async def delete_expense(expense_id: int):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ API"""
    async with aiohttp.ClientSession() as session:
        async with session.delete(f"{API_URL}{expense_id}/") as resp:
            return resp.status == 204

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class EditExpenseState(StatesGroup):
    amount = State()
    comment = State()
    reason = State()  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã

async def edit_expense_start(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–π —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–∞"""
    expense_id = callback.data.split("_")[-1]
    await state.update_data(expense_id=expense_id)
    await state.set_state(EditExpenseState.amount)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")

async def edit_expense_amount(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—É–º–º—ã –∏ –∑–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    try:
        amount = float(message.text)
        await state.update_data(amount=amount)
        await state.set_state(EditExpenseState.comment)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

async def edit_expense_comment(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –∑–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã"""
    data = await state.get_data()
    expense_id = data["expense_id"]
    new_amount = data["amount"]
    new_comment = message.text if message.text else ""

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    await state.update_data(comment=new_comment)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø—Ä–∏—á–∏–Ω—ã
    await state.set_state(EditExpenseState.reason)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø—Ä–∏—á–∏–Ω—É —Ä–∞—Å—Ö–æ–¥–∞:")

# –í–≤–æ–¥–∏–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é edit_expense_reason
async def edit_expense_reason(message: types.Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–µ, –≤–∫–ª—é—á–∞—è –ø—Ä–∏—á–∏–Ω—É"""
    data = await state.get_data()
    expense_id = data["expense_id"]
    new_amount = data["amount"]
    new_comment = data["comment"]
    new_reason = message.text if message.text else ""  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (YYYY-MM-DD)
    current_date = data.get("date", date.today().strftime("%Y-%m-%d"))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –¥–∞—Ç—É –∏–ª–∏ —Ç–µ–∫—É—â—É—é, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–∞

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    update_data = {
        "amount": new_amount,
        "comment": new_comment,
        "reason": new_reason,
        "date": current_date,  # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    }

    async with aiohttp.ClientSession() as session:
        async with session.put(f"{API_URL}{expense_id}/", json=update_data) as resp:
            response_text = await resp.text()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞

            if resp.status == 200:
                await message.answer("‚úÖ –†–∞—Å—Ö–æ–¥ –æ–±–Ω–æ–≤–ª—ë–Ω!")
            else:
                await message.answer(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ö–æ–¥: {resp.status}\n–û—Ç–≤–µ—Ç: {response_text}")

    await state.clear()


async def delete_expense_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞"""
    expense_id = int(callback.data.split("_")[-1])
    success = await delete_expense(expense_id)
    if success:
        await callback.answer("‚úÖ –†–∞—Å—Ö–æ–¥ —É–¥–∞–ª–µ–Ω!")
        await callback.message.delete()
    else:
        await callback.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")

async def edit_expense_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞"""
    expense_id = int(callback.data.split("_")[-1])
    await state.update_data(expense_id=expense_id)
    await state.set_state(EditExpenseState.amount)
    await callback.message.answer("‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞:")
