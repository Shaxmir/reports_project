# handlers/sale_handlers.py
import aiohttp
import aiogram
from datetime import date
from aiogram import types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from asgiref.sync import sync_to_async
from reports.models import Sale, CashRegister

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
class SaleState(StatesGroup):
    name = State()
    quantity = State()
    price = State()
    payment_method = State()
    sale_date = State()
    shipment_date = State()
    comment = State()

API_URL = "http://185.255.133.33:8001/api/"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sale
async def start_sale(message: Message, state: FSMContext):
    await state.set_state(SaleState.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–Ω–µ—Ä—ã:")

async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(SaleState.quantity)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü:")

async def process_quantity(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    await state.update_data(quantity=int(message.text))
    await state.set_state(SaleState.price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É:")

async def process_price(message: Message, state: FSMContext):
    try:
        price = float(message.text)
        await state.update_data(price_per_unit=price)
        await state.set_state(SaleState.payment_method)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: invoice, card, cash")
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

async def process_payment(message: Message, state: FSMContext):
    if message.text not in ["invoice", "card", "cash"]:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ: invoice, card –∏–ª–∏ cash")
        return
    await state.update_data(payment_method=message.text)
    await state.set_state(SaleState.sale_date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–¥–∞–∂–∏ (YYYY-MM-DD):")

async def process_sale_date(message: Message, state: FSMContext):
    await state.update_data(sale_date=message.text)
    await state.set_state(SaleState.shipment_date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–≥—Ä—É–∑–∫–∏ (YYYY-MM-DD):")

async def process_shipment_date(message: Message, state: FSMContext):
    await state.update_data(shipment_date=message.text)
    await state.set_state(SaleState.comment)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")

async def process_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    data["comment"] = message.text if message.text else ""
    async with aiohttp.ClientSession() as session:
        async with session.post(f"{API_URL}sales/", json=data) as resp:
            if resp.status == 201:
                await message.answer("‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                if data["payment_method"] == "cash":
                    sale_amount = data["quantity"] * data["price_per_unit"]
                    cash_data = {"amount": sale_amount}
                    async with session.post(f"{API_URL}cash/", json=cash_data) as cash_resp:
                        response_data = await cash_resp.json()
                        if "cash_total" in response_data:
                            new_balance = response_data["cash_total"]
                            await message.answer(
                                f"üí∞ –ö–∞—Å—Å–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ {sale_amount} —Ä—É–±.\nüîπ –ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {new_balance} —Ä—É–±."
                            )
                        else:
                            await message.answer(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Å—Å—ã: {response_data}")
            else:
                error_text = await resp.text()
                await message.answer(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂–∏: {error_text}")
    await state.clear()

@sync_to_async
def get_today_sales():
    return list(Sale.objects.filter(sale_date=date.today()))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —á–∞—Å—Ç—è–º
async def send_long_message(message, text, chunk_size=4096):
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –µ–≥–æ –¥–ª–∏–Ω–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
    for i in range(0, len(text), chunk_size):
        try:
            await message.answer(text[i:i+chunk_size], parse_mode="Markdown")
        except aiogram.exceptions.TelegramBadRequest as e:
            if "can't parse entities" in str(e):
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∏–∑-–∑–∞ —Ä–∞–∑–º–µ—Ç–∫–∏, –ø—Ä–æ–±—É–µ–º –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç –Ω–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                await message.answer(text[i:i+chunk_size], parse_mode="HTML")
            else:
                # –í —Å–ª—É—á–∞–µ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
                break



async def get_all_sales(message: types.Message):
    sales = await get_today_sales()  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏

    if not sales:
        await message.answer("‚ùå –ü—Ä–æ–¥–∞–∂ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –±—ã–ª–æ.")
        return

    sales_list = []
    unique_sales = set()  # –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂

    for sale in sales:
        if sale.id in unique_sales:
            continue  # –ï—Å–ª–∏ –ø—Ä–æ–¥–∞–∂–∞ —É–∂–µ –±—ã–ª–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        unique_sales.add(sale.id)

        payment_method = {
            'invoice': '–ü–æ —Å—á–µ—Ç—É',
            'card': '–ö–∞—Ä—Ç–æ–π',
            'cash': '–ù–∞–ª–∏—á–Ω—ã–º–∏'
        }.get(sale.payment_method, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

        sale_info = (
            f"ü™ö *{sale.name}*\n"
            f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {sale.quantity} —à—Ç.\n"
            f"   - –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {sale.price_per_unit} —Ä—É–±.\n"
            f"   - –û–±—â–∞—è —Å—É–º–º–∞: {sale.total_price} —Ä—É–±.\n"
            f"   - –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method}\n"
            f"   - –î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏: {sale.sale_date}\n"
            f"   - –î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏: {sale.shipment_date}\n"
            f"   - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {sale.comment if sale.comment else '–ù–µ—Ç'}\n"
            "-"
        )
        sales_list.append(sale_info)

    report_text = "üìã *–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–¥–∞–∂ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n" + "\n".join(sales_list)
    print(sale_info)
    await send_long_message(message, report_text)
