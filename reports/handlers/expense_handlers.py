# handlers/expense_handlers.py
import aiohttp
from datetime import datetime
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram import types, Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

router = Router()
API_URL = "http://185.255.133.33:8001/api/"

class ExpenseState(StatesGroup):
    reason = State()
    amount = State()
    comment = State()

async def start_expense(message: Message, state: FSMContext):
    await state.set_state(ExpenseState.reason)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Ä–∞—Å—Ö–æ–¥–∞:")

async def process_reason(message: Message, state: FSMContext):
    await state.update_data(reason=message.text)
    await state.set_state(ExpenseState.amount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")

async def process_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        await state.update_data(amount=amount)
        await state.set_state(ExpenseState.comment)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

async def process_expense_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    data["comment"] = message.text if message.text else ""
    data["date"] = datetime.now().strftime("%Y-%m-%d")
    async with aiohttp.ClientSession() as session:
        async with session.post(f"{API_URL}expenses/", json=data) as resp:
            response_text = await resp.text()
            print("–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response_text)  # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç!
            try:
                response_data = await resp.json()
            except Exception:
                response_data = {}
            if resp.status == 201:
                await message.answer("‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!")
            elif resp.status == 400 and "error" in response_data:
                await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {response_data['error']}")
            elif resp.status == 400:
                await message.answer("‚ö† –û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –≤ –∫–∞—Å—Å–µ!")
            else:
                await message.answer(f"‚ö† –û—à–∏–±–∫–∞! –ö–æ–¥: {resp.status}")
    await state.clear()





# –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –∏ —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
async def get_expenses_keyboard():
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}expenses/") as resp:
            if resp.status == 200:
                expenses = await resp.json()
            else:
                return None

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=f"{exp['reason']}: {exp['amount']} —Ä—É–±.", callback_data="none"),
            ],
            [
                InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_{exp['id']}"),
                InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{exp['id']}")
            ]
            for exp in expenses
        ]
    )
    return keyboard



# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /all_expenses
@router.message(Command("all_expenses"))
async def list_expenses(message: Message):
    keyboard = await get_expenses_keyboard()
    if keyboard:
        await message.answer("–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã:", reply_markup=keyboard)
    else:
        await message.answer("‚ö† –û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã.")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞
@router.callback_query(F.data.startswith("delete_"))
async def delete_expense(callback: CallbackQuery):
    expense_id = callback.data.split("_")[1]
    
    async with aiohttp.ClientSession() as session:
        async with session.delete(f"{API_URL}expenses/{expense_id}/") as resp:
            if resp.status == 204:
                await callback.answer("–†–∞—Å—Ö–æ–¥ —É–¥–∞–ª–µ–Ω.")
                await callback.message.delete()
            else:
                await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏!")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞ (–Ω–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
@router.callback_query(F.data.startswith("edit_"))
async def edit_expense(callback: CallbackQuery):
    expense_id = callback.data.split("_")[1]
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞ {expense_id}:")
    await callback.answer()

    @router.message()
    async def process_edit_expense(message: Message):
        new_amount = message.text.strip()
        if not new_amount.isdigit():
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
            return
        
        async with aiohttp.ClientSession() as session:
            async with session.patch(f"{API_URL}expenses/{expense_id}/", json={"amount": new_amount}) as resp:
                if resp.status == 200:
                    await message.answer(f"‚úÖ –†–∞—Å—Ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω: {new_amount} —Ä—É–±.")
                else:
                    await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!")
